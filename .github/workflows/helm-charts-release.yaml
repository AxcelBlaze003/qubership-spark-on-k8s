---

name: Helm Charts Release
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release version'
        required: true
        type: string
      sp_release:
        description: 'Status Provisioner Release version'
        required: true
        type: string
      oauth2_proxy_release:
        description: 'OAuth2 Proxy Release version'
        required: true
        type: string
permissions:
  contents: write
  packages: write
run-name: ${{ github.repository }} Release ${{ github.event.inputs.release }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  sp_release: ${{ inputs.sp_release }}
  oauth2_proxy_release: ${{ inputs.oauth2_proxy_release }}
jobs:
  check-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Check if tag exists
        id: check_tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@main
        with:
          tag-name: '${{ inputs.release }}'
          ref: ${{ github.ref }}
          create-tag: false
          check-tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  load-docker-build-components:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.load_component.outputs.components }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Docker Configuration
        id: load_component
        run: |
          CONFIG_FILE="$GITHUB_WORKSPACE/.github/docker-build-config.json"

          verify=$(jq '
            def verify_structure:
              .components as $components
              | ($components | type == "array")
              and (all($components[];
                has("name") and
                has("file") and
                has("context") and
                has("stage") and
                has("platforms")
              ));
            verify_structure
            | if . then true else false end
          ' "$CONFIG_FILE")

          if [ "$verify" == "true" ]; then
            echo " $CONFIG_FILE is valid"
            components=$(jq -c ".components" "$CONFIG_FILE")
          else
            echo " $CONFIG_FILE is invalid"
            echo " $CONFIG_FILE is invalid" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          echo "components=${components}" >> "$GITHUB_OUTPUT"

  docker-check-build:
    needs: [load-docker-build-components, check-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract and loop through stage 1 components
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo " Stage 1 build started"
          components=$(echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 1)')
          echo "$components" | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            platforms=$(echo "$component" | jq -r .platforms)
            echo " Building $name for stage 1"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref ${{ github.ref }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=true \
              --field platforms="$platforms" \
              --field tags="${{ env.IMAGE_VERSION }}"
          done

      - name: Extract and loop through stage 2 components
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo " Stage 2 build started"
          components=$(echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 2)')
          echo "$components" | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            platforms=$(echo "$component" | jq -r .platforms)
            echo " Building $name for stage 2"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref ${{ github.ref }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=true \
              --field platforms="$platforms" \
              --field tags="${{ env.IMAGE_VERSION }}"
          done

      - name: Extract and loop through stage 3 components
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo " Stage 3 build started"
          components=$(echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 3)')
          echo "$components" | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            platforms=$(echo "$component" | jq -r .platforms)
            echo " Building $name for stage 3"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref ${{ github.ref }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=true \
              --field platforms="$platforms" \
              --field tags="${{ env.IMAGE_VERSION }}"
          done

  chart-release-prepare:
    needs: [check-tag, load-docker-build-components, docker-check-build]
    runs-on: ubuntu-latest
    outputs:
      images-versions: ${{ steps.update-versions.outputs.images-versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Update versions in values"
        id: update-versions
        uses: netcracker/qubership-workflow-hub/actions/helm-charts-release@main
        with:
          release-version: ${{ inputs.release }}
          config-file: .github/helm-charts-release-config.yaml
        env:
          ${{ insert }}: ${{ vars }}
      - name: "Debug"
        run: |
          echo "Images versions: ${{ steps.update-versions.outputs.images-versions }}"

  docker-build:
    needs: [chart-release-prepare, load-docker-build-components]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Build stage 1 components
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Stage 1 builds"
          echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 1)' > stage1.json
          cat stage1.json | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            version=$(echo '${{ needs.chart-release-prepare.outputs.images-versions }}' | jq -r --arg name "$name" '.[$name]')
            version=${version:-${{ inputs.release }}}
            platforms=$(echo "$component" | jq -r .platforms)
            echo " Building $name with version $version for platforms $platforms"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref release-${{ inputs.release }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=false \
              --field platforms="$platforms" \
              --field tags="$version,latest"
          done

      - name: Build stage 2 components
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Stage 2 builds"
          echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 2)' > stage2.json
          cat stage2.json | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            version=$(echo '${{ needs.chart-release-prepare.outputs.images-versions }}' | jq -r --arg name "$name" '.[$name]')
            version=${version:-${{ inputs.release }}}
            platforms=$(echo "$component" | jq -r .platforms)
            echo "Building $name with version $version for platforms $platforms"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref release-${{ inputs.release }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=false \
              --field platforms="$platforms" \
              --field tags="$version,latest"
          done

      - name: Build stage 3 components
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Stage 3 builds"
          echo '${{ needs.load-docker-build-components.outputs.components }}' | jq -c '.[] | select(.stage == 3)' > stage3.json
          cat stage3.json | while read -r component; do
            name=$(echo "$component" | jq -r .name)
            version=$(echo '${{ needs.chart-release-prepare.outputs.images-versions }}' | jq -r --arg name "$name" '.[$name]')
            version=${version:-${{ inputs.release }}}
            platforms=$(echo "$component" | jq -r .platforms)
            echo "Building $name with version $version for platforms $platforms"

            echo "$component" > component.json
            gh workflow run netcracker/qubership-workflow-hub/actions/docker-action@main \
              --ref release-${{ inputs.release }} \
              --field component="$(cat component.json)" \
              --field download-artifact=false \
              --field dry-run=false \
              --field platforms="$platforms" \
              --field tags="$version,latest"
          done

  charts-release:
    needs: [docker-build]
    continue-on-error: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release-${{ inputs.release }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        #continue-on-error: true
        uses: netcracker/chart-releaser-action@main
        with:
          charts_dir: chart/helm
          release_name_template: "{{ .Version }}"
          skip_existing: true
          skip_upload: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Release-drafter"
        uses: netcracker/release-drafter@master
        with:
          config-name: release-drafter-config.yml
          publish: true
          name: ${{ inputs.release }}
          tag: ${{ inputs.release }}
          version: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Assets
        uses: netcracker/qubership-workflow-hub/actions/assets-action@main
        with:
          tag: ${{ inputs.release }}
          item-path: .cr-release-packages/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}